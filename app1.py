{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ae7e0267-fb37-469b-baae-0949877c0490",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-22 14:52:39.031 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run /Applications/anaconda3/lib/python3.12/site-packages/ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-07-22 14:52:39.037 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "# Load trained logistic regression model\n",
    "with open(\"logistic_model.pkl\", \"rb\") as file:\n",
    "    model = pickle.load(file)\n",
    "\n",
    "st.set_page_config(page_title=\"üìû Customer Churn Predictor\", layout=\"centered\")\n",
    "st.title(\"üìâ Customer Churn Prediction App\")\n",
    "st.markdown(\"Enter customer details to predict whether they are likely to churn.\")\n",
    "\n",
    "# Collect user input\n",
    "gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n",
    "senior = st.selectbox(\"Senior Citizen\", [\"Yes\", \"No\"])\n",
    "partner = st.selectbox(\"Has Partner?\", [\"Yes\", \"No\"])\n",
    "dependents = st.selectbox(\"Has Dependents?\", [\"Yes\", \"No\"])\n",
    "tenure = st.slider(\"Tenure (months)\", 0, 72, 12)\n",
    "phoneservice = st.selectbox(\"Phone Service\", [\"Yes\", \"No\"])\n",
    "multiplelines = st.selectbox(\"Multiple Lines\", [\"No\", \"Yes\", \"No phone service\"])\n",
    "internet = st.selectbox(\"Internet Service\", [\"DSL\", \"Fiber optic\", \"No\"])\n",
    "onlinesecurity = st.selectbox(\"Online Security\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "onlinebackup = st.selectbox(\"Online Backup\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "deviceprotection = st.selectbox(\"Device Protection\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "techsupport = st.selectbox(\"Tech Support\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "streamingtv = st.selectbox(\"Streaming TV\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "streamingmovies = st.selectbox(\"Streaming Movies\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "contract = st.selectbox(\"Contract Type\", [\"Month-to-month\", \"One year\", \"Two year\"])\n",
    "paperlessbilling = st.selectbox(\"Paperless Billing\", [\"Yes\", \"No\"])\n",
    "paymentmethod = st.selectbox(\"Payment Method\", [\n",
    "    \"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"\n",
    "])\n",
    "monthlycharges = st.number_input(\"Monthly Charges\", min_value=0.0)\n",
    "totalcharges = st.number_input(\"Total Charges\", min_value=0.0)\n",
    "\n",
    "# Encoding input to match training format\n",
    "binary_map = {'Yes': 1, 'No': 0, 'Female': 0, 'Male': 1}\n",
    "input_data = [\n",
    "    binary_map[gender],\n",
    "    binary_map[senior],\n",
    "    binary_map[partner],\n",
    "    binary_map[dependents],\n",
    "    tenure,\n",
    "    binary_map[phoneservice],\n",
    "    monthlycharges,\n",
    "    totalcharges,\n",
    "    binary_map[paperlessbilling],\n",
    "    1 if multiplelines == 'Yes' else 0,\n",
    "    1 if multiplelines == 'No phone service' else 0,\n",
    "    1 if internet == 'Fiber optic' else 0,\n",
    "    1 if internet == 'No' else 0,\n",
    "    1 if onlinesecurity == 'No' else 0,\n",
    "    1 if onlinesecurity == 'No internet service' else 0,\n",
    "    1 if onlinebackup == 'No' else 0,\n",
    "    1 if onlinebackup == 'No internet service' else 0,\n",
    "    1 if deviceprotection == 'No' else 0,\n",
    "    1 if deviceprotection == 'No internet service' else 0,\n",
    "    1 if techsupport == 'No' else 0,\n",
    "    1 if techsupport == 'No internet service' else 0,\n",
    "    1 if streamingtv == 'No' else 0,\n",
    "    1 if streamingtv == 'No internet service' else 0,\n",
    "    1 if streamingmovies == 'No' else 0,\n",
    "    1 if streamingmovies == 'No internet service' else 0,\n",
    "    1 if contract == 'One year' else 0,\n",
    "    1 if contract == 'Two year' else 0,\n",
    "    1 if paymentmethod == 'Electronic check' else 0,\n",
    "    1 if paymentmethod == 'Mailed check' else 0,\n",
    "    1 if paymentmethod == 'Credit card (automatic)' else 0,\n",
    "]\n",
    "\n",
    "final_input = np.array([input_data])\n",
    "\n",
    "# Predict churn\n",
    "if st.button(\"Predict\"):\n",
    "    prediction = model.predict(final_input)[0]\n",
    "    if prediction == 1:\n",
    "        st.error(\"‚ö†Ô∏è This customer is likely to churn.\")\n",
    "    else:\n",
    "        st.success(\"‚úÖ This customer is likely to stay.\")\n",
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "# Load trained logistic regression model\n",
    "with open(\"logistic_model.pkl\", \"rb\") as file:\n",
    "    model = pickle.load(file)\n",
    "\n",
    "st.set_page_config(page_title=\"üìû Customer Churn Predictor\", layout=\"centered\")\n",
    "st.title(\"üìâ Customer Churn Prediction App\")\n",
    "st.markdown(\"Enter customer details to predict whether they are likely to churn.\")\n",
    "\n",
    "# Collect user input\n",
    "gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n",
    "senior = st.selectbox(\"Senior Citizen\", [\"Yes\", \"No\"])\n",
    "partner = st.selectbox(\"Has Partner?\", [\"Yes\", \"No\"])\n",
    "dependents = st.selectbox(\"Has Dependents?\", [\"Yes\", \"No\"])\n",
    "tenure = st.slider(\"Tenure (months)\", 0, 72, 12)\n",
    "phoneservice = st.selectbox(\"Phone Service\", [\"Yes\", \"No\"])\n",
    "multiplelines = st.selectbox(\"Multiple Lines\", [\"No\", \"Yes\", \"No phone service\"])\n",
    "internet = st.selectbox(\"Internet Service\", [\"DSL\", \"Fiber optic\", \"No\"])\n",
    "onlinesecurity = st.selectbox(\"Online Security\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "onlinebackup = st.selectbox(\"Online Backup\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "deviceprotection = st.selectbox(\"Device Protection\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "techsupport = st.selectbox(\"Tech Support\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "streamingtv = st.selectbox(\"Streaming TV\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "streamingmovies = st.selectbox(\"Streaming Movies\", [\"Yes\", \"No\", \"No internet service\"])\n",
    "contract = st.selectbox(\"Contract Type\", [\"Month-to-month\", \"One year\", \"Two year\"])\n",
    "paperlessbilling = st.selectbox(\"Paperless Billing\", [\"Yes\", \"No\"])\n",
    "paymentmethod = st.selectbox(\"Payment Method\", [\n",
    "    \"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"\n",
    "])\n",
    "monthlycharges = st.number_input(\"Monthly Charges\", min_value=0.0)\n",
    "totalcharges = st.number_input(\"Total Charges\", min_value=0.0)\n",
    "\n",
    "# Encoding input to match training format\n",
    "binary_map = {'Yes': 1, 'No': 0, 'Female': 0, 'Male': 1}\n",
    "input_data = [\n",
    "    binary_map[gender],\n",
    "    binary_map[senior],\n",
    "    binary_map[partner],\n",
    "    binary_map[dependents],\n",
    "    tenure,\n",
    "    binary_map[phoneservice],\n",
    "    monthlycharges,\n",
    "    totalcharges,\n",
    "    binary_map[paperlessbilling],\n",
    "    1 if multiplelines == 'Yes' else 0,\n",
    "    1 if multiplelines == 'No phone service' else 0,\n",
    "    1 if internet == 'Fiber optic' else 0,\n",
    "    1 if internet == 'No' else 0,\n",
    "    1 if onlinesecurity == 'No' else 0,\n",
    "    1 if onlinesecurity == 'No internet service' else 0,\n",
    "    1 if onlinebackup == 'No' else 0,\n",
    "    1 if onlinebackup == 'No internet service' else 0,\n",
    "    1 if deviceprotection == 'No' else 0,\n",
    "    1 if deviceprotection == 'No internet service' else 0,\n",
    "    1 if techsupport == 'No' else 0,\n",
    "    1 if techsupport == 'No internet service' else 0,\n",
    "    1 if streamingtv == 'No' else 0,\n",
    "    1 if streamingtv == 'No internet service' else 0,\n",
    "    1 if streamingmovies == 'No' else 0,\n",
    "    1 if streamingmovies == 'No internet service' else 0,\n",
    "    1 if contract == 'One year' else 0,\n",
    "    1 if contract == 'Two year' else 0,\n",
    "    1 if paymentmethod == 'Electronic check' else 0,\n",
    "    1 if paymentmethod == 'Mailed check' else 0,\n",
    "    1 if paymentmethod == 'Credit card (automatic)' else 0,\n",
    "]\n",
    "\n",
    "final_input = np.array([input_data])\n",
    "\n",
    "# Predict churn\n",
    "if st.button(\"Predict\"):\n",
    "    prediction = model.predict(final_input)[0]\n",
    "    if prediction == 1:\n",
    "        st.error(\"‚ö†Ô∏è This customer is likely to churn.\")\n",
    "    else:\n",
    "        st.success(\"‚úÖ This customer is likely to stay.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "378970fb-293a-423a-8ddf-2fb6f3872095",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
